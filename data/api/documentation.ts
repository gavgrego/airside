/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
export type GetLoungesParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  "pagination[withCount]"?: boolean;
  /**
   * Page number (default: 0)
   */
  "pagination[page]"?: number;
  /**
   * Page size (default: 25)
   */
  "pagination[pageSize]"?: number;
  /**
   * Offset value (default: 0)
   */
  "pagination[start]"?: number;
  /**
   * Number of entities to return (default: 25)
   */
  "pagination[limit]"?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: { [key: string]: any };
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetAirportsParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  "pagination[withCount]"?: boolean;
  /**
   * Page number (default: 0)
   */
  "pagination[page]"?: number;
  /**
   * Page size (default: 25)
   */
  "pagination[pageSize]"?: number;
  /**
   * Offset value (default: 0)
   */
  "pagination[start]"?: number;
  /**
   * Number of entities to return (default: 25)
   */
  "pagination[limit]"?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: { [key: string]: any };
  /**
   * Locale to apply
   */
  locale?: string;
};

export type LoungeResponseMeta = { [key: string]: any };

export interface LoungeResponseDataObject {
  attributes?: Lounge;
  id?: number;
}

export interface LoungeResponse {
  data?: LoungeResponseDataObject;
  meta?: LoungeResponseMeta;
}

export type LoungeUpdatedByDataAttributes = { [key: string]: any };

export type LoungeUpdatedByData = {
  attributes?: LoungeUpdatedByDataAttributes;
  id?: number;
};

export type LoungeUpdatedBy = {
  data?: LoungeUpdatedByData;
};

export type LoungeLocalizations = {
  data?: LoungeListResponseDataItemLocalized[];
};

export type LoungeCreatedByDataAttributes = { [key: string]: any };

export type LoungeCreatedByData = {
  attributes?: LoungeCreatedByDataAttributes;
  id?: number;
};

export type LoungeCreatedBy = {
  data?: LoungeCreatedByData;
};

export type LoungeAirportData = {
  attributes?: LoungeAirportDataAttributes;
  id?: number;
};

export type LoungeAirport = {
  data?: LoungeAirportData;
};

export interface Lounge {
  airport?: LoungeAirport;
  closeTime?: string;
  createdAt?: string;
  createdBy?: LoungeCreatedBy;
  locale?: string;
  localizations?: LoungeLocalizations;
  name?: string;
  openTime?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: LoungeUpdatedBy;
}

export type LoungeAirportDataAttributesUpdatedByDataAttributes = {
  [key: string]: any;
};

export type LoungeAirportDataAttributesUpdatedByData = {
  attributes?: LoungeAirportDataAttributesUpdatedByDataAttributes;
  id?: number;
};

export type LoungeAirportDataAttributesUpdatedBy = {
  data?: LoungeAirportDataAttributesUpdatedByData;
};

export type LoungeAirportDataAttributesLounges = {
  data?: LoungeAirportDataAttributesLoungesDataItem[];
};

export type LoungeAirportDataAttributes = {
  createdAt?: string;
  createdBy?: LoungeAirportDataAttributesCreatedBy;
  lounges?: LoungeAirportDataAttributesLounges;
  Name?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: LoungeAirportDataAttributesUpdatedBy;
};

export type LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedBy = {
  data?: LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedByData;
};

export type LoungeAirportDataAttributesLoungesDataItemAttributesLocalizations =
  {
    data?: unknown[];
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributes = {
  airport?: LoungeAirportDataAttributesLoungesDataItemAttributesAirport;
  closeTime?: string;
  createdAt?: string;
  createdBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedBy;
  locale?: string;
  localizations?: LoungeAirportDataAttributesLoungesDataItemAttributesLocalizations;
  name?: string;
  openTime?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: LoungeAirportDataAttributesLoungesDataItemAttributesUpdatedBy;
};

export type LoungeAirportDataAttributesLoungesDataItem = {
  attributes?: LoungeAirportDataAttributesLoungesDataItemAttributes;
  id?: number;
};

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItem =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRoles =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItem[];
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributes =
  {
    blocked?: boolean;
    createdAt?: string;
    createdBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedBy;
    email?: string;
    firstname?: string;
    isActive?: boolean;
    lastname?: string;
    preferedLanguage?: string;
    registrationToken?: string;
    resetPasswordToken?: string;
    roles?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRoles;
    updatedAt?: string;
    updatedBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesUpdatedBy;
    username?: string;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedBy = {
  data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByData;
};

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsers =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributes =
  {
    code?: string;
    createdAt?: string;
    createdBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
    description?: string;
    name?: string;
    permissions?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
    updatedAt?: string;
    updatedBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
    users?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes =
  {
    action?: string;
    actionParameters?: unknown;
    conditions?: unknown;
    createdAt?: string;
    createdBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
    properties?: unknown;
    role?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
    subject?: string;
    updatedAt?: string;
    updatedBy?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedByData =
  {
    attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedByDataAttributes;
    id?: number;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedBy =
  {
    data?: LoungeAirportDataAttributesLoungesDataItemAttributesCreatedByDataAttributesCreatedByData;
  };

export type LoungeAirportDataAttributesLoungesDataItemAttributesAirportDataAttributes =
  { [key: string]: any };

export type LoungeAirportDataAttributesLoungesDataItemAttributesAirportData = {
  attributes?: LoungeAirportDataAttributesLoungesDataItemAttributesAirportDataAttributes;
  id?: number;
};

export type LoungeAirportDataAttributesLoungesDataItemAttributesAirport = {
  data?: LoungeAirportDataAttributesLoungesDataItemAttributesAirportData;
};

export type LoungeAirportDataAttributesCreatedByDataAttributes = {
  [key: string]: any;
};

export type LoungeAirportDataAttributesCreatedByData = {
  attributes?: LoungeAirportDataAttributesCreatedByDataAttributes;
  id?: number;
};

export type LoungeAirportDataAttributesCreatedBy = {
  data?: LoungeAirportDataAttributesCreatedByData;
};

export type LoungeListResponseMetaPagination = {
  page?: number;
  /** @maximum 1 */
  pageCount?: number;
  /** @minimum 25 */
  pageSize?: number;
  total?: number;
};

export type LoungeListResponseMeta = {
  pagination?: LoungeListResponseMetaPagination;
};

export interface LoungeListResponseDataItem {
  attributes?: Lounge;
  id?: number;
}

export interface LoungeListResponse {
  data?: LoungeListResponseDataItem[];
  meta?: LoungeListResponseMeta;
}

export type LoungeLocalizationListResponseMetaPagination = {
  page?: number;
  /** @maximum 1 */
  pageCount?: number;
  /** @minimum 25 */
  pageSize?: number;
  total?: number;
};

export type LoungeLocalizationListResponseMeta = {
  pagination?: LoungeLocalizationListResponseMetaPagination;
};

export interface LoungeListResponseDataItemLocalized {
  attributes?: Lounge;
  id?: number;
}

export interface LoungeLocalizationListResponse {
  data?: LoungeListResponseDataItemLocalized[];
  meta?: LoungeLocalizationListResponseMeta;
}

export type LoungeLocalizationResponseMeta = { [key: string]: any };

export interface LoungeResponseDataObjectLocalized {
  attributes?: Lounge;
  id?: number;
}

export interface LoungeLocalizationResponse {
  data?: LoungeResponseDataObjectLocalized;
  meta?: LoungeLocalizationResponseMeta;
}

export type LoungeRequestData = {
  airport?: LoungeRequestDataAirport;
  closeTime?: string;
  locale?: string;
  name?: string;
  openTime?: string;
};

export interface LoungeRequest {
  data: LoungeRequestData;
}

export type LoungeRequestDataAirport = number | string;

export type LoungeLocalizationRequestAirport = number | string;

export interface LoungeLocalizationRequest {
  airport?: LoungeLocalizationRequestAirport;
  closeTime?: string;
  locale: string;
  name?: string;
  openTime?: string;
}

export type AirportResponseMeta = { [key: string]: any };

export interface AirportResponseDataObject {
  attributes?: Airport;
  id?: number;
}

export interface AirportResponse {
  data?: AirportResponseDataObject;
  meta?: AirportResponseMeta;
}

export type AirportUpdatedByDataAttributes = { [key: string]: any };

export type AirportUpdatedByData = {
  attributes?: AirportUpdatedByDataAttributes;
  id?: number;
};

export type AirportUpdatedBy = {
  data?: AirportUpdatedByData;
};

export type AirportLoungesDataItem = {
  attributes?: AirportLoungesDataItemAttributes;
  id?: number;
};

export type AirportLounges = {
  data?: AirportLoungesDataItem[];
};

export interface Airport {
  createdAt?: string;
  createdBy?: AirportCreatedBy;
  lounges?: AirportLounges;
  Name?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: AirportUpdatedBy;
}

export type AirportLoungesDataItemAttributesUpdatedByDataAttributes = {
  [key: string]: any;
};

export type AirportLoungesDataItemAttributesUpdatedByData = {
  attributes?: AirportLoungesDataItemAttributesUpdatedByDataAttributes;
  id?: number;
};

export type AirportLoungesDataItemAttributesUpdatedBy = {
  data?: AirportLoungesDataItemAttributesUpdatedByData;
};

export type AirportLoungesDataItemAttributesLocalizations = {
  data?: unknown[];
};

export type AirportLoungesDataItemAttributesCreatedByDataAttributes = {
  [key: string]: any;
};

export type AirportLoungesDataItemAttributesCreatedByData = {
  attributes?: AirportLoungesDataItemAttributesCreatedByDataAttributes;
  id?: number;
};

export type AirportLoungesDataItemAttributesCreatedBy = {
  data?: AirportLoungesDataItemAttributesCreatedByData;
};

export type AirportLoungesDataItemAttributesAirportData = {
  attributes?: AirportLoungesDataItemAttributesAirportDataAttributes;
  id?: number;
};

export type AirportLoungesDataItemAttributesAirport = {
  data?: AirportLoungesDataItemAttributesAirportData;
};

export type AirportLoungesDataItemAttributes = {
  airport?: AirportLoungesDataItemAttributesAirport;
  closeTime?: string;
  createdAt?: string;
  createdBy?: AirportLoungesDataItemAttributesCreatedBy;
  locale?: string;
  localizations?: AirportLoungesDataItemAttributesLocalizations;
  name?: string;
  openTime?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: AirportLoungesDataItemAttributesUpdatedBy;
};

export type AirportLoungesDataItemAttributesAirportDataAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesUpdatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesUpdatedBy = {
  data?: AirportLoungesDataItemAttributesAirportDataAttributesUpdatedByData;
};

export type AirportLoungesDataItemAttributesAirportDataAttributesLoungesDataItemAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesLoungesDataItem =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesLoungesDataItemAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesLounges = {
  data?: AirportLoungesDataItemAttributesAirportDataAttributesLoungesDataItem[];
};

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributes =
  {
    blocked?: boolean;
    createdAt?: string;
    createdBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedBy;
    email?: string;
    firstname?: string;
    isActive?: boolean;
    lastname?: string;
    preferedLanguage?: string;
    registrationToken?: string;
    resetPasswordToken?: string;
    roles?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRoles;
    updatedAt?: string;
    updatedBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedBy;
    username?: string;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedBy = {
  data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByData;
};

export type AirportLoungesDataItemAttributesAirportDataAttributes = {
  createdAt?: string;
  createdBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedBy;
  lounges?: AirportLoungesDataItemAttributesAirportDataAttributesLounges;
  Name?: string;
  publishedAt?: string;
  updatedAt?: string;
  updatedBy?: AirportLoungesDataItemAttributesAirportDataAttributesUpdatedBy;
};

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesUpdatedByData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributes =
  {
    code?: string;
    createdAt?: string;
    createdBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
    description?: string;
    name?: string;
    permissions?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
    updatedAt?: string;
    updatedBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
    users?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItem =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRoles =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItem[];
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes =
  {
    action?: string;
    actionParameters?: unknown;
    conditions?: unknown;
    createdAt?: string;
    createdBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
    properties?: unknown;
    role?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
    subject?: string;
    updatedAt?: string;
    updatedBy?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedByDataAttributes =
  { [key: string]: any };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedByData =
  {
    attributes?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
    id?: number;
  };

export type AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedBy =
  {
    data?: AirportLoungesDataItemAttributesAirportDataAttributesCreatedByDataAttributesCreatedByData;
  };

export type AirportCreatedByDataAttributes = { [key: string]: any };

export type AirportCreatedByData = {
  attributes?: AirportCreatedByDataAttributes;
  id?: number;
};

export type AirportCreatedBy = {
  data?: AirportCreatedByData;
};

export type AirportListResponseMetaPagination = {
  page?: number;
  /** @maximum 1 */
  pageCount?: number;
  /** @minimum 25 */
  pageSize?: number;
  total?: number;
};

export type AirportListResponseMeta = {
  pagination?: AirportListResponseMetaPagination;
};

export interface AirportListResponseDataItem {
  attributes?: Airport;
  id?: number;
}

export interface AirportListResponse {
  data?: AirportListResponseDataItem[];
  meta?: AirportListResponseMeta;
}

export type AirportRequestDataLoungesItem = number | string;

export type AirportRequestData = {
  lounges?: AirportRequestDataLoungesItem[];
  Name?: string;
};

export interface AirportRequest {
  data: AirportRequestData;
}

export type ErrorErrorDetails = { [key: string]: any };

export type ErrorError = {
  details?: ErrorErrorDetails;
  message?: string;
  name?: string;
  status?: number;
};

export interface Error {
  /** @nullable */
  data?: ErrorData;
  error: ErrorError;
}

export type ErrorDataOneOfTwoItem = { [key: string]: any };

export type ErrorDataOneOf = { [key: string]: any };

/**
 * @nullable
 */
export type ErrorData = ErrorDataOneOf | ErrorDataOneOfTwoItem[] | null;

export const getAirports = (
  params?: GetAirportsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AirportListResponse>> => {
  return axios.get(`/airports`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetAirportsQueryKey = (params?: GetAirportsParams) => {
  return [`/airports`, ...(params ? [params] : [])] as const;
};

export const getGetAirportsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAirports>>,
  TError = AxiosError<Error>,
>(
  params?: GetAirportsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAirports>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAirportsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAirports>>> = ({
    signal,
  }) => getAirports(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAirports>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAirportsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAirports>>
>;
export type GetAirportsQueryError = AxiosError<Error>;

export const useGetAirports = <
  TData = Awaited<ReturnType<typeof getAirports>>,
  TError = AxiosError<Error>,
>(
  params?: GetAirportsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAirports>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAirportsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postAirports = (
  airportRequest: AirportRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AirportResponse>> => {
  return axios.post(`/airports`, airportRequest, options);
};

export const getPostAirportsMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAirports>>,
    TError,
    { data: AirportRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAirports>>,
  TError,
  { data: AirportRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAirports>>,
    { data: AirportRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAirports(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAirportsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAirports>>
>;
export type PostAirportsMutationBody = AirportRequest;
export type PostAirportsMutationError = AxiosError<Error>;

export const usePostAirports = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAirports>>,
    TError,
    { data: AirportRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAirports>>,
  TError,
  { data: AirportRequest },
  TContext
> => {
  const mutationOptions = getPostAirportsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getAirportsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AirportResponse>> => {
  return axios.get(`/airports/${id}`, options);
};

export const getGetAirportsIdQueryKey = (id: number) => {
  return [`/airports/${id}`] as const;
};

export const getGetAirportsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAirportsId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAirportsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAirportsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAirportsId>>> = ({
    signal,
  }) => getAirportsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAirportsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAirportsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAirportsId>>
>;
export type GetAirportsIdQueryError = AxiosError<Error>;

export const useGetAirportsId = <
  TData = Awaited<ReturnType<typeof getAirportsId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAirportsId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAirportsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putAirportsId = (
  id: number,
  airportRequest: AirportRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AirportResponse>> => {
  return axios.put(`/airports/${id}`, airportRequest, options);
};

export const getPutAirportsIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAirportsId>>,
    TError,
    { id: number; data: AirportRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAirportsId>>,
  TError,
  { id: number; data: AirportRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAirportsId>>,
    { id: number; data: AirportRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putAirportsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAirportsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAirportsId>>
>;
export type PutAirportsIdMutationBody = AirportRequest;
export type PutAirportsIdMutationError = AxiosError<Error>;

export const usePutAirportsId = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAirportsId>>,
    TError,
    { id: number; data: AirportRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putAirportsId>>,
  TError,
  { id: number; data: AirportRequest },
  TContext
> => {
  const mutationOptions = getPutAirportsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteAirportsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/airports/${id}`, options);
};

export const getDeleteAirportsIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAirportsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAirportsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAirportsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAirportsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAirportsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAirportsId>>
>;

export type DeleteAirportsIdMutationError = AxiosError<Error>;

export const useDeleteAirportsId = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAirportsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteAirportsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteAirportsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getLounges = (
  params?: GetLoungesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoungeListResponse>> => {
  return axios.get(`/lounges`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetLoungesQueryKey = (params?: GetLoungesParams) => {
  return [`/lounges`, ...(params ? [params] : [])] as const;
};

export const getGetLoungesQueryOptions = <
  TData = Awaited<ReturnType<typeof getLounges>>,
  TError = AxiosError<Error>,
>(
  params?: GetLoungesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLounges>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoungesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLounges>>> = ({
    signal,
  }) => getLounges(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLounges>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLoungesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLounges>>
>;
export type GetLoungesQueryError = AxiosError<Error>;

export const useGetLounges = <
  TData = Awaited<ReturnType<typeof getLounges>>,
  TError = AxiosError<Error>,
>(
  params?: GetLoungesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLounges>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLoungesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postLounges = (
  loungeRequest: LoungeRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoungeResponse>> => {
  return axios.post(`/lounges`, loungeRequest, options);
};

export const getPostLoungesMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLounges>>,
    TError,
    { data: LoungeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLounges>>,
  TError,
  { data: LoungeRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLounges>>,
    { data: LoungeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postLounges(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoungesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLounges>>
>;
export type PostLoungesMutationBody = LoungeRequest;
export type PostLoungesMutationError = AxiosError<Error>;

export const usePostLounges = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLounges>>,
    TError,
    { data: LoungeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLounges>>,
  TError,
  { data: LoungeRequest },
  TContext
> => {
  const mutationOptions = getPostLoungesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getLoungesId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoungeResponse>> => {
  return axios.get(`/lounges/${id}`, options);
};

export const getGetLoungesIdQueryKey = (id: number) => {
  return [`/lounges/${id}`] as const;
};

export const getGetLoungesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getLoungesId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLoungesId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoungesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLoungesId>>> = ({
    signal,
  }) => getLoungesId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getLoungesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLoungesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLoungesId>>
>;
export type GetLoungesIdQueryError = AxiosError<Error>;

export const useGetLoungesId = <
  TData = Awaited<ReturnType<typeof getLoungesId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLoungesId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLoungesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putLoungesId = (
  id: number,
  loungeRequest: LoungeRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoungeResponse>> => {
  return axios.put(`/lounges/${id}`, loungeRequest, options);
};

export const getPutLoungesIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLoungesId>>,
    TError,
    { id: number; data: LoungeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLoungesId>>,
  TError,
  { id: number; data: LoungeRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLoungesId>>,
    { id: number; data: LoungeRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putLoungesId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutLoungesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putLoungesId>>
>;
export type PutLoungesIdMutationBody = LoungeRequest;
export type PutLoungesIdMutationError = AxiosError<Error>;

export const usePutLoungesId = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLoungesId>>,
    TError,
    { id: number; data: LoungeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof putLoungesId>>,
  TError,
  { id: number; data: LoungeRequest },
  TContext
> => {
  const mutationOptions = getPutLoungesIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteLoungesId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/lounges/${id}`, options);
};

export const getDeleteLoungesIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLoungesId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLoungesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLoungesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteLoungesId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLoungesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLoungesId>>
>;

export type DeleteLoungesIdMutationError = AxiosError<Error>;

export const useDeleteLoungesId = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLoungesId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteLoungesId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteLoungesIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postLoungesIdLocalizations = (
  id: number,
  loungeLocalizationRequest: LoungeLocalizationRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoungeLocalizationResponse>> => {
  return axios.post(
    `/lounges/${id}/localizations`,
    loungeLocalizationRequest,
    options,
  );
};

export const getPostLoungesIdLocalizationsMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoungesIdLocalizations>>,
    TError,
    { id: number; data: LoungeLocalizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLoungesIdLocalizations>>,
  TError,
  { id: number; data: LoungeLocalizationRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLoungesIdLocalizations>>,
    { id: number; data: LoungeLocalizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postLoungesIdLocalizations(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoungesIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLoungesIdLocalizations>>
>;
export type PostLoungesIdLocalizationsMutationBody = LoungeLocalizationRequest;
export type PostLoungesIdLocalizationsMutationError = AxiosError<Error>;

export const usePostLoungesIdLocalizations = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLoungesIdLocalizations>>,
    TError,
    { id: number; data: LoungeLocalizationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLoungesIdLocalizations>>,
  TError,
  { id: number; data: LoungeLocalizationRequest },
  TContext
> => {
  const mutationOptions = getPostLoungesIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
